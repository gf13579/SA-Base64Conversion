name: Release - UCC Build and Package

on:
  push:
    tags:
      - 'v*' # This triggers the workflow for any tag starting with 'v' (e.g., v1.0.0, v0.0.1)

permissions:
  contents: write

jobs:
  build-package-and-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history for tag context

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x' # Use a suitable Python version, e.g., '3.9', '3.10', '3.11'

    - name: Install Python dependencies
      run: |
        pip install splunk-add-on-ucc-framework
        pip install splunk-appinspect

    - name: Run UCC Gen Build
      run: |
        # Extract the version number from the tag name (e.g., 'v1.0.0' becomes '1.0.0')
        TAG_VERSION="${{ github.ref_name }}"
        VERSION_NUMBER=$(echo "$TAG_VERSION" | sed 's/^v//')
        ucc-gen build --source package --ta-version "$VERSION_NUMBER"

    - name: Temporary workaround for UCC searchbnf.conf bug
      run: |
        find . -name searchbnf.conf | xargs -I {} bash -c 'FIRST_LINE=$(head -n 1 "{}"); if ! echo "$FIRST_LINE" | grep -q -- "-command"; then sed -i "1s/\\[\\(.*\\)\\]/[\\1-command]/" "{}"; fi'

    - name: Create archive folder
      run: |
        mkdir archive

    - name: Run UCC Gen Package
      run: |
        # This command packages the app from 'output/${{ github.event.repository.name }}'
        # and places the resulting .tar.gz file into the 'archive' directory.
        ucc-gen package --path 'output/${{ github.event.repository.name }}' --output archive

    - name: Find packaged app
      id: find_app
      run: |
        # Find the .tar.gz file generated by ucc-gen package within the 'archive' directory
        APP_PACKAGE_PATH=$(find archive -name "*.tar.gz" -print -quit)
        if [ -z "$APP_PACKAGE_PATH" ]; then
          echo "Error: No .tar.gz file found in 'archive' directory."
          exit 1
        fi
        echo "Found packaged app at: $APP_PACKAGE_PATH"
        # Set the path as an output variable for subsequent steps
        echo "app_path=$APP_PACKAGE_PATH" >> "$GITHUB_OUTPUT"

    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.find_app.outputs.app_path }} # Upload the generated .tar.gz as a release asset
        tag_name: ${{ github.ref }} # The tag that triggered the workflow (e.g., refs/tags/v1.0.0)
        name: Release ${{ github.ref_name }} # The name of the GitHub Release (e.g., Release v1.0.0)
        body: |
          Automated release for tag ${{ github.ref_name }}.
          See the attached Splunk App package.
        draft: false # Set to true if you want to create a draft release first
        prerelease: false # Set to true if this is a pre-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is automatically provided by GitHub Actions for authentication